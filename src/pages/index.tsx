import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import { Flex, Input, Button } from "@mantine/core";
import { useForm } from "@mantine/form";
import { toast } from "react-hot-toast";
import { Card, Checkbox } from "@mantine/core";

const Home: NextPage = () => {
  const ctx = api.useContext();
  const form = useForm({
    initialValues: {
      newTodo: "",
    },
    validateInputOnBlur: true,
    validate: {
      newTodo: (val) => {
        if (val.trim().length < 3) {
          return "Must be at least 3 characters";
        }
      },
    },
  });

  const { mutate, isLoading } = api.todo.create.useMutation({
    onError: (err) => {
      toast.error(err.message);
    },
    onSuccess: () => {
      toast.success("Successfully added new todo");
      form.reset();
      void ctx.todo.invalidate();
    },
  });

  const { data, isLoading: isTodosLoading } = api.todo.getAll.useQuery(
    undefined,
    {
      onError: (err) => {
        toast.error(err.message);
      },
    }
  );

  const { mutate: updateTodo } = api.todo.update.useMutation({
    onError: (err) => {
      toast.error(err.message);
    },
    onSuccess: () => {
      toast.success("Successfully updated todo");
      void ctx.todo.invalidate();
    },
  });

  const { mutate: deleteTodo } = api.todo.delete.useMutation({
    onError: (err) => {
      toast.error(err.message);
    },
    onSuccess: () => {
      toast.success("Successfully deleted todo");
      void ctx.todo.invalidate();
    },
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-bold text-white">To-Do List</h1>
          <form
            onSubmit={form.onSubmit((values) =>
              mutate({
                text: values.newTodo,
              })
            )}
          >
            <Flex gap={4} direction="row">
              <Input.Wrapper withAsterisk error={form.errors.newTodo}>
                <Input
                  placeholder="Enter new ToDo Item here"
                  {...form.getInputProps("newTodo")}
                  disabled={isLoading}
                />
              </Input.Wrapper>
              <Button
                type="submit"
                variant="outline"
                color="white"
                disabled={form.errors.newTodo !== undefined || isLoading}
              >
                Add
              </Button>
            </Flex>
          </form>
          <div className="flex w-full flex-col items-center justify-center gap-4">
            {!!isTodosLoading && <div>Loading...</div>}
            {data?.map((todo) => (
              <Card
                key={todo.id}
                shadow="sm"
                padding="sm"
                radius="md"
                withBorder
                w={300}
                p={20}
              >
                <Card.Section>
                  <Flex justify="space-between" align="center">
                    <span>{todo.title}</span>
                    <div className="flex items-center justify-between gap-4">
                      <Checkbox
                        checked={todo.completed}
                        onChange={() => {
                          updateTodo({
                            id: todo.id,
                            checked: !todo.completed,
                            text: todo.title,
                          });
                        }}
                      />
                      <Button
                        variant="subtle"
                        color="red"
                        onClick={() => {
                          deleteTodo({
                            id: todo.id,
                          });
                        }}
                      >
                        Delete
                      </Button>
                    </div>
                  </Flex>
                </Card.Section>
              </Card>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
